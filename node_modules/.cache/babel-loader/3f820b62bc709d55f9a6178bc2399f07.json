{"ast":null,"code":"import _objectSpread from \"/Users/itmac022/Documents/Sarang/PeerbitsDemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/itmac022/Documents/Sarang/PeerbitsDemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/itmac022/Documents/Sarang/PeerbitsDemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/itmac022/Documents/Sarang/PeerbitsDemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport carTableMock from \"./carTableMock\";\nimport MockUtils from \"./mock.utils\";\n/**\r\n * For Cors Issues\r\n */\n\nexport var corsHeaders = {\n  'cache-control': 'no-cache',\n  'content-type': 'application/json; charset=utf-8',\n  'access-control-allow-origin': '*',\n  'access-control-allow-headers': 'origin, x-requested-with, content-type, accept, accept-language',\n  'access-control-allow-methods': 'OPTIONS, GET, POST, PATCH, PUT'\n};\nexport default function mockProducts(_x) {\n  return _mockProducts.apply(this, arguments);\n}\n\nfunction _mockProducts() {\n  _mockProducts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(mock) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            mock.onPost(\"api/products\").reply(function (_ref) {\n              var data = _ref.data;\n\n              var _JSON$parse = JSON.parse(data),\n                  product = _JSON$parse.product;\n\n              var _product$model = product.model,\n                  model = _product$model === void 0 ? \"\" : _product$model,\n                  _product$manufacture = product.manufacture,\n                  manufacture = _product$manufacture === void 0 ? \"\" : _product$manufacture,\n                  _product$modelYear = product.modelYear,\n                  modelYear = _product$modelYear === void 0 ? 2000 : _product$modelYear,\n                  _product$mileage = product.mileage,\n                  mileage = _product$mileage === void 0 ? 0 : _product$mileage,\n                  _product$description = product.description,\n                  description = _product$description === void 0 ? \"\" : _product$description,\n                  _product$color = product.color,\n                  color = _product$color === void 0 ? \"Black\" : _product$color,\n                  _product$price = product.price,\n                  price = _product$price === void 0 ? 1000 : _product$price,\n                  _product$condition = product.condition,\n                  condition = _product$condition === void 0 ? 0 : _product$condition,\n                  _product$status = product.status,\n                  status = _product$status === void 0 ? 0 : _product$status,\n                  _product$VINCode = product.VINCode,\n                  VINCode = _product$VINCode === void 0 ? \"\" : _product$VINCode;\n              var id = generateProductId();\n              var newProduct = {\n                id: id,\n                model: model,\n                manufacture: manufacture,\n                modelYear: modelYear,\n                mileage: mileage,\n                description: description,\n                color: color,\n                price: price,\n                condition: condition,\n                status: status,\n                VINCode: VINCode\n              };\n              carTableMock.push(newProduct);\n              return [200, newProduct];\n            });\n            mock.onPost(\"api/products/find\").reply( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n                var mockUtils, _JSON$parse2, queryParams, filteredProducts;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        mockUtils = new MockUtils();\n                        _JSON$parse2 = JSON.parse(config.data), queryParams = _JSON$parse2.queryParams;\n                        filteredProducts = mockUtils.baseFilter(carTableMock, queryParams);\n                        return _context.abrupt(\"return\", [200, filteredProducts]);\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n            mock.onPost(\"api/products/deleteProducts\").reply(function (config) {\n              var _JSON$parse3 = JSON.parse(config.data),\n                  ids = _JSON$parse3.ids;\n\n              ids.forEach(function (id) {\n                var index = carTableMock.findIndex(function (el) {\n                  return el.id === id;\n                });\n\n                if (index > -1) {\n                  carTableMock.splice(index, 1);\n                }\n              });\n              return [200];\n            });\n            mock.onPost(\"api/products/updateStatusForProducts\").reply(function (config) {\n              var _JSON$parse4 = JSON.parse(config.data),\n                  ids = _JSON$parse4.ids,\n                  status = _JSON$parse4.status;\n\n              carTableMock.forEach(function (el) {\n                if (ids.findIndex(function (id) {\n                  return id === el.id;\n                }) > -1) {\n                  el.status = status;\n                }\n              });\n              return [200];\n            });\n            mock.onGet(/api\\/products\\/\\d+/).reply(function (config) {\n              var id = config.url.match(/api\\/products\\/(\\d+)/)[1];\n              var product = carTableMock.find(function (el) {\n                return el.id === +id;\n              });\n\n              if (!product) {\n                return [400];\n              }\n\n              return [200, product];\n            });\n            mock.onPut(/api\\/products\\/\\d+/).reply(function (config) {\n              var id = config.url.match(/api\\/products\\/(\\d+)/)[1];\n\n              var _JSON$parse5 = JSON.parse(config.data),\n                  product = _JSON$parse5.product;\n\n              var index = carTableMock.findIndex(function (el) {\n                return el.id === +id;\n              });\n\n              if (!index) {\n                return [400];\n              }\n\n              carTableMock[index] = _objectSpread({}, product);\n              return [200];\n            });\n            mock.onDelete(/api\\/products\\/\\d+/).reply(function (config) {\n              var id = config.url.match(/api\\/products\\/(\\d+)/)[1];\n              var index = carTableMock.findIndex(function (el) {\n                return el.id === +id;\n              });\n              carTableMock.splice(index, 1);\n\n              if (!index === -1) {\n                return [400];\n              }\n\n              return [200];\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _mockProducts.apply(this, arguments);\n}\n\nfunction generateProductId() {\n  var ids = carTableMock.map(function (el) {\n    return el.id;\n  });\n  var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n  return maxId + 1;\n}","map":{"version":3,"sources":["/Users/itmac022/Documents/Sarang/PeerbitsDemo/src/app/modules/ECommerce/__mocks__/mockProduct.js"],"names":["carTableMock","MockUtils","corsHeaders","mockProducts","mock","onPost","reply","data","JSON","parse","product","model","manufacture","modelYear","mileage","description","color","price","condition","status","VINCode","id","generateProductId","newProduct","push","config","mockUtils","queryParams","filteredProducts","baseFilter","ids","forEach","index","findIndex","el","splice","onGet","url","match","find","onPut","onDelete","map","maxId","Math","max"],"mappings":"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","sourcesContent":["import carTableMock from \"./carTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\n\r\n/**\r\n * For Cors Issues\r\n */\r\nexport const corsHeaders = {\r\n  'cache-control': 'no-cache',\r\n  'content-type': 'application/json; charset=utf-8',\r\n  'access-control-allow-origin': '*',\r\n  'access-control-allow-headers': 'origin, x-requested-with, content-type, accept, accept-language',\r\n  'access-control-allow-methods': 'OPTIONS, GET, POST, PATCH, PUT'\r\n};\r\n\r\nexport default async function mockProducts(mock) {\r\n  mock.onPost(\"api/products\").reply(({ data }) => {\r\n    const { product } = JSON.parse(data);\r\n    const {\r\n      model = \"\",\r\n      manufacture = \"\",\r\n      modelYear = 2000,\r\n      mileage = 0,\r\n      description = \"\",\r\n      color = \"Black\",\r\n      price = 1000,\r\n      condition = 0,\r\n      status = 0,\r\n      VINCode = \"\"\r\n    } = product;\r\n\r\n    const id = generateProductId();\r\n    const newProduct = {\r\n      id,\r\n      model,\r\n      manufacture,\r\n      modelYear,\r\n      mileage,\r\n      description,\r\n      color,\r\n      price,\r\n      condition,\r\n      status,\r\n      VINCode\r\n    };\r\n\r\n    carTableMock.push(newProduct);\r\n    return [200, newProduct];\r\n  });\r\n\r\n  mock.onPost(\"api/products/find\").reply(async (config) => {\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    const filteredProducts = mockUtils.baseFilter(carTableMock, queryParams);\r\n    return [200, filteredProducts];\r\n  });\r\n\r\n  mock.onPost(\"api/products/deleteProducts\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach(id => {\r\n      const index = carTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        carTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onPost(\"api/products/updateStatusForProducts\").reply(config => {\r\n    const { ids, status } = JSON.parse(config.data);\r\n    carTableMock.forEach(el => {\r\n      if (ids.findIndex(id => id === el.id) > -1) {\r\n        el.status = status;\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/products\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\r\n    const product = carTableMock.find(el => el.id === +id);\r\n    if (!product) {\r\n      return [400];\r\n    }\r\n\r\n    return [200, product];\r\n  });\r\n\r\n  mock.onPut(/api\\/products\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\r\n    const { product } = JSON.parse(config.data);\r\n    const index = carTableMock.findIndex(el => el.id === +id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    carTableMock[index] = { ...product };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/products\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\r\n    const index = carTableMock.findIndex(el => el.id === +id);\r\n    carTableMock.splice(index, 1);\r\n    if (!index === -1) {\r\n      return [400];\r\n    }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateProductId() {\r\n  const ids = carTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}"]},"metadata":{},"sourceType":"module"}